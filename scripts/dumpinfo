#!/bin/bash
# Swizzin troubleshooting utility
# GPLv3, flying_sayusages for Swizzin 2020

# seds through an entire log and tries to replace any instances of any password
# To be used as a shorthand for piping

# shellcheck source=sources/globals.sh
. /etc/swizzin/sources/globals.sh
# shellcheck source=sources/functions/utils
. /etc/swizzin/sources/functions/utils

# Processes stdin and posts it online
_post_content() {
	_wash_content | nc termbin.com 9999
}

# Removes any private info out of stdin
_wash_content() {
	#TODO make this work lmao
	# TODO wash API keys, hostnames, IP addresses, usernames??
	pwuser="$(_get_master_username)"
	password="$(_get_user_password "$pwuser")"
	domain=""                                                                                                    #TODO figure out how to get this
	ipaddress=""                                                                                                 #TODO figure out how to get this
	sed '1 i\This content should be washed of any identifiable information' | sed "s/$password/###PASSWORD###/g" # | sed "s/$domain/###DOMAIN###/g" | sed "s/$ipaddress/###IPADDRESS###/g"
}

_make_app_choices() {
	# Get a list of installed apps to make logs for
	list_installed=($(find /install -type f -name .*.lock | awk -F. '{print $2}'))
	cmd=(whiptail --title "Choose apps to upload logs for" --separate-output --checklist "The logs for the selected applications will be included in the paste for your issue" 15 40 7)
	#shellcheck disable=2086 # The result is broken when it actually is quoted, we want the words to expand here.
	readarray options < <(printf '%s\n "" \n ON \n' "${list_installed[@]}")
	choices=$("${cmd[@]}" "${options[@]}" 2>&1 > /dev/tty)
	exitstatus=$?
	if [ $exitstatus = 0 ]; then
		:
	else
		echo_warn "Upload cancelled"
		exit 1
	fi

	echo_log_only "Choices = $choices"

	# Determine which users to uploads logs for when MU apps are being used
	readarray users < <(_get_nonmaster_list)
	if [[ ${#users[@]} -eq 0 ]]; then
		user=$(_get_master_username)
	else
		useroptions=("$(_get_master_username)" "" on)
		for u in "${users[@]}"; do
			useroptions+=("$u" "" off)
		done
		if ! user=$(whiptail --radiolist "Which user to upload the logs for their MU apps?" 9 40 2 "${useroptions[@]}" 2>&1 > /dev/tty); then
			echo_warn "Upload cancelled"
			exit 1
		fi
	fi
}

_log_uploads() {
	echo_progress_start "Uploading logs to termbin..."
	# TODO maybe ensure only last N bytes are being sent in order not to hit the limit?
	logs_install="$(cat /root/logs/install.log | _post_content)"
	logs_swizzin=$(cat /root/logs/swizzin.log | _post_content)

	logs_app_list=()
	for choice in $choices; do
		paths=()
		commands=()
		note=""
		case $choice in
			qbittorrent)
				paths=("/home/$user/.local/share/data/qBittorrent/logs/qbittorrent.log")
				;;
			nginx)
				paths=(/var/log/nginx/error.log)
				commands=('nginx -T')
				;;
			panel)
				commands=('journalctl -u panel')
				;;
			*)
				echo_warn "No logs for $choice defined, please upload these manually"
				note="(No logs for $choice defined)"
				;;
		esac

		# Generating file to post
		tmpfile="/tmp/$choice"
		rm $tmpfile
		for cmdbruh in "${commands[@]}"; do
			{
				echo "#### Output of \"$cmdbruh\""
				$cmdbruh
				echo ""
			} >> "$tmpfile" 2>&1
		done

		for path in "${paths[@]}"; do
			{
				echo "#### Content of \"$path\""
				cat "$path"
				echo ""
			} >> "$tmpfile" 2>&1
		done

		[[ -s "$tmpfile" ]] && link=$(cat "$tmpfile" | _post_content)

		logs_app_list+=("$choice" "$link" "$note")

	done
	echo_progress_done "Logs uploaded"
}

_output_discord() {
	echo_warn "Please paste everything between these lines into your issue
Make sure to replace the content where indicated, otherwise the issue might get automatically closed."
	echo "
**Apps:**		$(printf -- '`%s` ' "${list_installed[@]}")
**Server:**		$(_os_pretty), \`$(_os_arch)\`
**Git:**		$(git -C /etc/swizzin log -1 --pretty=format:'`(%h)` %s')
**Logs**
- Install logs: <${logs_install}>
- Swizzin logs: <${logs_swizzin}>
$(printf -- '- %s <%s> %s\n' "${logs_app_list[@]}")
"
}

_output_github() {
	echo_warn "Please paste everything between these lines into your issue
Make sure to replace the content where indicated, otherwise the issue might get automatically closed."
	echo "<!-- ---------------------------------------------------------- -->

## Installed applications through swizzin
$(printf -- '- `%s`\n' "${list_installed[@]}")

## Server Info
- OS: $(_os_pretty)
- Arch: \`$(_os_arch)\`
- Hardware
$(dmidecode | grep -A3 '^System Information' | grep -v "System Information" | tr -d '\t' | sed 's/^/  - /')

## Swizzin version
$(git -C /etc/swizzin log -1 --pretty=format:"(%h) \`%s\` %d %an")

## Logs and output
- [Install logs](${logs_install})
- [Swizzin logs](${logs_swizzin})
$(printf -- '- [%s](%s) %s\n' "${logs_app_list[@]}")

<!-- ---------------------------------------------------------- -->"
}

_choose_destination() {
	if ! destination=$(whiptail --radiolist \
		"Where are you going to paste your info" 9 40 2 \
		"GitHub" "" ON \
		"Discord" "" OFF 2>&1 > /dev/tty); then
		echo_warn "Upload cancelled"
		exit 1
	fi

	echo_info "Generating dump for $destination"
}

_choose_destination
_make_app_choices
_log_uploads

if [[ $destination == "GitHub" ]]; then
	_output_github
else
	_output_discord
fi
